import java.io.*;
import java.util.ArrayList;
import cs1.*;
class FileRead{
	public FileRead(){

	}
	public ArrayList<String> readFile(ArrayList<String> Paths){
		String Path;
		ArrayList<String> output = new ArrayList<String>();
		for(int i = 0; i < Paths.size(); i++){
			Path = Paths.get(i);
			//System.out.println("location 1");
			try{
				//System.out.println("location 2");
				// Open the file that is the first 
				// command line parameter
				FileInputStream fstream = new FileInputStream(Path);
				// Get the object of DataInputStream
				DataInputStream in = new DataInputStream(fstream);
				BufferedReader br = new BufferedReader(new InputStreamReader(in));
				String strLine;
				//Read File Line By Line
				while ((strLine = br.readLine()) != null)   {
					// Print the content on the console
					output.add(strLine);
				}
				//System.out.println("location 3");
				//Close the input stream
				in.close();
				return output;
			}catch (Exception e){//Catch exception if any
				//System.err.println("Error: " + e.getMessage());
			}

		}
		return output;
	}
	public String writeFile(ArrayList<String> Paths, String outputText){

		String endPath  = "";
		boolean error = true;
		//System.out.println("location 1");
		for(int i = 0; i < Paths.size() && error; i++){
			endPath = Paths.get(i);
			try{
				File f;
				f=new File(endPath);
				if(!f.exists()){
					f.createNewFile();
					System.out.println("Please note, a new settings file was created at " + endPath + " using default values\nThe program will now quit so that" +
							" you may enter the desired values, the defaults are there to serve only as examples");
				}
			} catch (Exception e){//Catch exception if any
				//System.err.println("Error: " + e.getMessage());
			}
			//endPath = Paths.get(i);
			//System.out.println("location 2");
			try{
				// Create file 
				FileWriter fstream = new FileWriter(endPath);
				BufferedWriter out = new BufferedWriter(fstream);
				out.write(outputText);
				error = false;
				//System.out.println("location 3");
				//Close the output stream
				out.close();
			}catch (Exception e){//Catch exception if any
				//System.err.println("Error: " + e.getMessage());
			}
			if(i+1==Paths.size() && error){ //hrm, I was thinking about this and I can solve it, let the user enter in the program a new file path and then use
				//the last option as an 'extra file path' variable and then append the new file path, but each time they run the program they'll need to renter the path
				System.out.println("No preferences file was found and the Program was unable to generate a valid file. \n" +
						"There are possible reasons for this: \nthe jar file was not run from the super user, which can be solved by adding a \"sudo\" in front of the " +
						"command\nYour system does not support the file system presets of this program, which can be solved by adding a new file path in the source" +
						"code, and then recompiling \n\n");
				while (error){
					System.out.println("For the present, please enter a file path in your system and the program will try and write to it, but" +
							" every time this program is run, you will have to enter the location again");
					String newPath = Keyboard.readString();
					try{
						FileInputStream fstream = new FileInputStream(newPath);
						DataInputStream in = new DataInputStream(fstream);
						BufferedReader br = new BufferedReader(new InputStreamReader(in));
						String strLine;
						while ((strLine = br.readLine()) != null) {
							//just wanted to force it to read the lines here to ensure it's a file
							
						}
						in.close();
						System.out.println("A file was detected at the entered location; the program will procede with values drawn from it");
						return "-99" +newPath;
					}catch (Exception e){//Catch exception if any
						//System.err.println("Error: " + e.getMessage());
					}
					try{
						File f;
						f=new File(newPath);
						f.createNewFile();
						System.out.println("Please note, a new settings file was created at " + newPath + " using default values\nThe program will now quit so that" +
								" you may enter the desired values, the defaults are there to serve only as examples");
						FileWriter fstream = new FileWriter(newPath);
						BufferedWriter out = new BufferedWriter(fstream);
						out.write(outputText);
						error = false;
						out.close();
						return "-98" + newPath;
					}catch (Exception e){error = true;System.out.println("Not a valid path");}}
			}
		}
		return endPath;

	}
}